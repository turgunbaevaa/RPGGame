import java.util.*;
import java.util.stream.Collectors;

public class GameController {
    private Board board;
    private List<Hero> heroes;
    private List<Enemy> enemies;
    private int turnCount = 0;
    private final int MAX_TURNS = 50;
    private final int MAX_WAVES = 5;
    private int wave = 1;
    private Scanner scanner;
    private int gold = 0;
    private Set<Enemy> enemiesActedThisRound; // To track which enemies have acted in the interleaved turns

    public GameController() {
        board = new Board();
        heroes = new ArrayList<>();
        enemies = new ArrayList<>();
        scanner = new Scanner(System.in);
        enemiesActedThisRound = new HashSet<>(); // Initialize the set
        setupHeroes();
        spawnEnemiesWave();
    }

    private void setupHeroes() {
        heroes.add(new Hero(Hero.HeroType.TANK, new Position(0, 4)));
        heroes.add(new Hero(Hero.HeroType.WARRIOR, new Position(0, 5)));
        heroes.add(new Hero(Hero.HeroType.ARCHER, new Position(1, 4)));
        heroes.add(new Hero(Hero.HeroType.HEALER, new Position(1, 5)));

        for (Hero hero : heroes) {
            board.placeUnit(hero);
        }
    }

    private void spawnEnemiesWave() {
        Iterator<Enemy> enemyIterator = enemies.iterator();
        while (enemyIterator.hasNext()) {
            Enemy enemy = enemyIterator.next();
            if (enemy.isAlive()) {
                board.removeUnit(enemy); // Remove living enemies from board for re-spawning
            }
        }
        enemies.clear(); // Clear the list

        int enemyCount = 3 + wave;

        System.out.println("\n--- –°–ü–ê–í–ù –í–†–ê–ì–û–í ---");
        for (int i = 0; i < enemyCount; i++) {
            Enemy enemy;
            Position spawnPos = new Position(9, i % 10);
            int attempts = 0;
            // Find an empty spot for the new enemy
            while (board.getUnitAt(spawnPos) != null && attempts < 100) {
                spawnPos = new Position(spawnPos.getX(), (spawnPos.getY() + 1) % 10);
                // If we wrap around the Y-axis, try shifting X
                if (spawnPos.getY() == 0 && attempts > 0) {
                    spawnPos = new Position(spawnPos.getX() - 1, spawnPos.getY());
                }
                attempts++;
            }
            if (attempts >= 100 || !board.isValidPosition(spawnPos)) {
                // Fallback: search for any empty spot if initial strategy fails
                boolean foundSpot = false;
                for (int x = 9; x >= 0; x--) {
                    for (int y = 0; y < 10; y++) {
                        Position tempPos = new Position(x,y);
                        if (board.isEmpty(tempPos)) {
                            spawnPos = tempPos;
                            foundSpot = true;
                            break;
                        }
                    }
                    if (foundSpot) break;
                }
                if (!foundSpot) {
                    System.out.println("–û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤!");
                    break; // Exit loop if no spot can be found
                }
            }


            double rand = Math.random();
            if (rand < 0.4) {
                enemy = new GoblinGrunt(spawnPos);
            } else if (rand < 0.75) {
                enemy = new SkeletonArcher(spawnPos);
            } else {
                enemy = new OrcShaman(spawnPos);
            }

            enemy.levelUpStats(wave);
            enemies.add(enemy);
            board.placeUnit(enemy);
            System.out.printf("–í—Ä–∞–≥ %s (%s) —Å–æ–∑–¥–∞–Ω –Ω–∞ %s. HP: %d/%d, –£—Ä–æ–Ω: %d, –ó–æ–ª–æ—Ç–æ: %d%n",
                    enemy.getName(), enemy.getClass().getSimpleName(), enemy.getPosition().toString(),
                    enemy.getHealth(), enemy.getMaxHealth(), enemy.getDamage(), enemy.getGoldValue());
        }

        System.out.println("‚öîÔ∏è –í–æ–ª–Ω–∞ " + wave + " –Ω–∞—á–∞–ª–∞—Å—å! –í—Ä–∞–≥–æ–≤: " + enemies.size());
    }

    public void startGame() {
        while (turnCount < MAX_TURNS && !isGameOver()) {
            System.out.println("\n===== –•–û–î " + (turnCount + 1) + " =====");
            board.printBoard();
            displayUnitStats();
            System.out.println("üí∞ –ó–æ–ª–æ—Ç–æ: " + gold);

            enemiesActedThisRound.clear(); // Reset which enemies have acted for this main turn

            // Interleaved Player and Enemy Turns
            for (Hero hero : heroes) {
                if (!hero.isAlive()) {
                    continue; // Skip dead heroes
                }
                playerTurnIndividual(hero); // This hero takes an action
                performOneEnemyAction();    // Then one enemy takes an action
                cleanupDeadUnits();         // Clean up dead units immediately
            }

            // After all heroes have acted, make any remaining enemies take their turn
            performRemainingEnemyActions();

            // Final cleanup after all actions for the turn
            cleanupDeadUnits();

            // Check if wave is cleared
            if (enemies.stream().noneMatch(Enemy::isAlive)) {
                System.out.println("\nüåü –í–æ–ª–Ω–∞ " + wave + " –ø—Ä–æ–π–¥–µ–Ω–∞!");

                for (Hero hero : heroes) {
                    if (hero.isAlive()) {
                        hero.levelUp();
                    }
                }

                if (wave < MAX_WAVES) {
                    showShop();
                }

                wave++;
                if (wave <= MAX_WAVES) {
                    for (Hero hero : heroes) {
                        hero.setTaunting(false); // Reset taunt for next wave
                    }
                    spawnEnemiesWave();
                } else {
                    break; // All waves cleared, game ends
                }
            }
            turnCount++;
        }
        scanner.close();
        concludeGame();
    }

    private void displayUnitStats() {
        System.out.println("\n--- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ì–µ—Ä–æ–µ–≤ ---");
        heroes.stream().filter(Unit::isAlive).forEach(hero ->
                System.out.printf("%s %s (–£—Ä.%d) –ü–æ–∑–∏—Ü–∏—è: %s, HP: %d/%d, –£—Ä–æ–Ω: %d, –î–∞–ª—å–Ω–æ—Å—Ç—å: %d, –°–∫–æ—Ä–æ—Å—Ç—å: %d%n",
                        hero.getName(), hero.isTaunting() ? "(–ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è)" : "", hero.getLevel(),
                        hero.getPosition().toString(), hero.getHealth(), hero.getMaxHealth(),
                        hero.getDamage(), hero.getRange(), hero.getSpeed())
        );

        System.out.println("\n--- –°–æ—Å—Ç–æ—è–Ω–∏–µ –í—Ä–∞–≥–æ–≤ ---");
        enemies.stream().filter(Unit::isAlive).forEach(enemy ->
                System.out.printf("%s (%s) (–£—Ä.%d) –ü–æ–∑–∏—Ü–∏—è: %s, HP: %d/%d, –£—Ä–æ–Ω: %d, –î–∞–ª—å–Ω–æ—Å—Ç—å: %d, –°–∫–æ—Ä–æ—Å—Ç—å: %d%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), enemy.getLevel(), enemy.getPosition().toString(),
                        enemy.getHealth(), enemy.getMaxHealth(), enemy.getDamage(),
                        enemy.getRange(), enemy.getSpeed())
        );
        System.out.println("------------------------");
    }

    // Refactored playerTurn to take a single hero
    private void playerTurnIndividual(Hero hero) {
        System.out.println("\n--- –•–æ–¥ –ì–µ—Ä–æ—è: " + hero.getName() + " (HP: " + hero.getHealth() + "/" + hero.getMaxHealth() + ") ---");

        List<Enemy> nearbyEnemies = enemies.stream()
                .filter(Enemy::isAlive)
                .filter(e -> hero.getPosition().distanceTo(e.getPosition()) <= hero.getRange() + 2)
                .toList();
        if (!nearbyEnemies.isEmpty()) {
            System.out.println("‚ö†Ô∏è –†—è–¥–æ–º –≤—Ä–∞–≥–∏! (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö " + (hero.getRange() + 2) + " –∫–ª–µ—Ç–æ–∫):");
            for (Enemy e : nearbyEnemies) {
                System.out.println("  - " + e.getName() + " –Ω–∞ " + e.getPosition().toString() + " HP: " + e.getHealth() + "/" + e.getMaxHealth());
            }
        }

        System.out.print("1. –î–≤–∏–≥–∞—Ç—å—Å—è (–º–∞–∫—Å. " + hero.getSpeed() + " –∫–ª–µ—Ç–æ–∫)\n2. –ê—Ç–∞–∫–æ–≤–∞—Ç—å\n3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\n–í–∞—à –≤—ã–±–æ—Ä: ");
        int choice = 0;
        while (true) {
            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
                if (choice >= 1 && choice <= 3) break;
                else System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.");
            } else {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
        }
        scanner.nextLine();

        switch (choice) {
            case 1 -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X Y –¥–ª—è –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è: ");
                int x = -1, y = -1;
                try {
                    x = scanner.nextInt();
                    y = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞.");
                    scanner.nextLine();
                    // Do not continue, let the loop handle next hero if player inputs invalid value.
                    // Or, for a single hero turn, you might want to re-prompt or force end turn.
                    // For now, it will skip this hero's action for this turn.
                    return;
                }
                scanner.nextLine();
                Position newPos = new Position(x, y);

                if (!board.isValidPosition(newPos)) {
                    System.out.println("–û—à–∏–±–∫–∞: –ü–æ–∑–∏—Ü–∏—è –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã.");
                } else if (board.getUnitAt(newPos) != null && board.getUnitAt(newPos) != hero) {
                    System.out.println("–û—à–∏–±–∫–∞: –ü–æ–∑–∏—Ü–∏—è –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —é–Ω–∏—Ç–æ–º.");
                } else if (hero.getPosition().distanceTo(newPos) > hero.getSpeed()) {
                    System.out.println("–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ. –õ–∏–º–∏—Ç –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è: " + hero.getSpeed() + " –∫–ª–µ—Ç–æ–∫.");
                } else {
                    hero.move(newPos, board);
                    board.printBoard();
                }
            }
            case 2 -> {
                System.out.println(hero.getName() + " –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö " + hero.getRange() + " –∫–ª–µ—Ç–∫–∏(–æ–∫).");
                Enemy target = chooseTarget(hero);
                if (target != null) {
                    if (board.isInRange(hero, target)) {
                        hero.attack(target);
                    } else {
                        System.out.println("–¶–µ–ª—å –≤–Ω–µ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏.");
                    }
                } else {
                    System.out.println("–ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π.");
                }
            }
            case 3 -> {
                hero.useAbility(heroes, enemies, board);
            }
        }
    }

    private Enemy chooseTarget(Hero hero) {
        List<Enemy> inRangeEnemies = enemies.stream()
                .filter(Enemy::isAlive)
                .filter(e -> board.isInRange(hero, e))
                .collect(Collectors.toList());

        if (inRangeEnemies.isEmpty()) {
            System.out.println("–ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ –∑–æ–Ω–µ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏.");
            return null;
        }

        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏:");
        for (int i = 0; i < inRangeEnemies.size(); i++) {
            Enemy e = inRangeEnemies.get(i);
            Position pos = e.getPosition();
            System.out.printf("%d: %s –Ω–∞ %s (HP: %d/%d) –£—Ä–æ–Ω: %d%n",
                    i, e.getName(), pos.toString(), e.getHealth(), e.getMaxHealth(), e.getDamage());
        }

        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ");
        String input = scanner.nextLine();
        if (input.equalsIgnoreCase("q")) {
            System.out.println("–í—ã–±–æ—Ä —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.");
            return null;
        }

        try {
            int idx = Integer.parseInt(input);
            if (idx >= 0 && idx < inRangeEnemies.size()) {
                return inRangeEnemies.get(idx);
            } else {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏.");
            }
        } catch (NumberFormatException e) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.");
        }
        return null;
    }

    // New method for one enemy action after a hero's turn
    private void performOneEnemyAction() {
        Optional<Enemy> enemyToAct = enemies.stream()
                .filter(Enemy::isAlive)
                .filter(e -> !enemiesActedThisRound.contains(e))
                .findFirst();

        if (enemyToAct.isPresent()) {
            Enemy enemy = enemyToAct.get();
            System.out.println("\n--- –•–æ–¥ –í—Ä–∞–≥–∞: " + enemy.getName() + " (" + enemy.getClass().getSimpleName() + ") ---");

            // Orc Shaman attempts to use ability first
            if (enemy instanceof OrcShaman) {
                enemy.useAbility(heroes, enemies, board);
                if (enemy.getDamage() == 0) { // Pure support units finish their turn after ability
                    System.out.printf("%s (%s) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.%n", enemy.getName(), enemy.getClass().getSimpleName());
                    enemiesActedThisRound.add(enemy); // Mark as acted
                    return;
                }
            }

            Hero target = findClosestHero(enemy);
            if (target == null) {
                System.out.println(enemy.getName() + " –Ω–∞ " + enemy.getPosition().toString() + " –Ω–µ –Ω–∞—à–µ–ª —Ü–µ–ª–∏.");
                enemiesActedThisRound.add(enemy); // Mark as acted even if no target
                return;
            }

            if (board.isInRange(enemy, target)) {
                System.out.printf("%s (%s) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ %s –∞—Ç–∞–∫—É–µ—Ç %s (%s) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ %s.%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), enemy.getPosition().toString(),
                        target.getName(), target.getClass().getSimpleName(), target.getPosition().toString());
                enemy.attack(target);
            } else {
                moveToward(enemy, target.getPosition());
                System.out.printf("%s (%s) –¥–≤–∏–∂–µ—Ç—Å—è –∫ %s. –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: %s%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), target.getName(), enemy.getPosition().toString());
            }
            enemiesActedThisRound.add(enemy); // Mark as acted
        } else {
            System.out.println("\n--- –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–º —à–∞–≥–µ ---");
        }
    }

    // New method to handle enemies that haven't acted yet after all heroes
    private void performRemainingEnemyActions() {
        System.out.println("\n--- –•–æ–¥ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –í—Ä–∞–≥–æ–≤ ---");
        List<Enemy> remainingEnemies = enemies.stream()
                .filter(Enemy::isAlive)
                .filter(e -> !enemiesActedThisRound.contains(e))
                .collect(Collectors.toList());

        if (remainingEnemies.isEmpty()) {
            System.out.println("–í—Å–µ –≤—Ä–∞–≥–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –∏–ª–∏ –º–µ—Ä—Ç–≤—ã.");
            return;
        }

        for (Enemy enemy : remainingEnemies) {
            if (!enemy.isAlive()) continue; // Double check in case it died from another enemy action

            System.out.println("\n--- –•–æ–¥ –í—Ä–∞–≥–∞: " + enemy.getName() + " (" + enemy.getClass().getSimpleName() + ") ---");

            // Orc Shaman attempts to use ability first
            if (enemy instanceof OrcShaman) {
                enemy.useAbility(heroes, enemies, board);
                if (enemy.getDamage() == 0) { // Pure support units finish their turn after ability
                    System.out.printf("%s (%s) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.%n", enemy.getName(), enemy.getClass().getSimpleName());
                    continue;
                }
            }

            Hero target = findClosestHero(enemy);
            if (target == null) {
                System.out.println(enemy.getName() + " –Ω–∞ " + enemy.getPosition().toString() + " –Ω–µ –Ω–∞—à–µ–ª —Ü–µ–ª–∏.");
                continue;
            }

            if (board.isInRange(enemy, target)) {
                System.out.printf("%s (%s) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ %s –∞—Ç–∞–∫—É–µ—Ç %s (%s) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ %s.%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), enemy.getPosition().toString(),
                        target.getName(), target.getClass().getSimpleName(), target.getPosition().toString());
                enemy.attack(target);
            } else {
                moveToward(enemy, target.getPosition());
                System.out.printf("%s (%s) –¥–≤–∏–∂–µ—Ç—Å—è –∫ %s. –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: %s%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), target.getName(), enemy.getPosition().toString());
            }
        }
    }


    private Hero findClosestHero(Enemy enemy) {
        Optional<Hero> tauntingTank = heroes.stream()
                .filter(h -> h.isAlive() && h.getType() == Hero.HeroType.TANK && h.isTaunting())
                .findFirst();

        return tauntingTank.orElse(
                heroes.stream()
                        .filter(Hero::isAlive)
                        .min(Comparator.comparingInt(h -> h.getPosition().distanceTo(enemy.getPosition())))
                        .orElse(null)
        );
    }

    private void moveToward(Enemy enemy, Position targetPos) {
        Position current = enemy.getPosition();
        Position bestNextPos = current;
        int minDistance = current.distanceTo(targetPos);
        boolean foundAttackPosition = false;

        List<Position> possibleMoves = new ArrayList<>();

        for (int dx = -enemy.getSpeed(); dx <= enemy.getSpeed(); dx++) {
            for (int dy = -enemy.getSpeed(); dy <= enemy.getSpeed(); dy++) {
                if (Math.abs(dx) + Math.abs(dy) <= enemy.getSpeed()) {
                    Position potentialNext = new Position(current.getX() + dx, current.getY() + dy);

                    if (board.isValidPosition(potentialNext)) {
                        Unit unitAtPotentialNext = board.getUnitAt(potentialNext);
                        if (unitAtPotentialNext == null || unitAtPotentialNext.equals(enemy) || unitAtPotentialNext instanceof Enemy) {
                            possibleMoves.add(potentialNext);
                        }
                    }
                }
            }
        }

        for (Position move : possibleMoves) {
            int distanceToTargetFromMove = move.distanceTo(targetPos);
            if (distanceToTargetFromMove <= enemy.getRange()) {
                if (!foundAttackPosition || distanceToTargetFromMove < minDistance) {
                    minDistance = distanceToTargetFromMove;
                    bestNextPos = move;
                    foundAttackPosition = true;
                }
            } else if (!foundAttackPosition) {
                if (distanceToTargetFromMove < minDistance) {
                    minDistance = distanceToTargetFromMove;
                    bestNextPos = move;
                }
            }
        }

        if (!bestNextPos.equals(current)) {
            Unit unitAtBestNextPos = board.getUnitAt(bestNextPos);
            if (unitAtBestNextPos != null && unitAtBestNextPos instanceof Enemy && !unitAtBestNextPos.equals(enemy)) {
                Position fallbackPos = current;
                int fallbackMinDistance = current.distanceTo(targetPos);
                for (Position move : possibleMoves) {
                    if (board.isEmpty(move)) {
                        int distance = move.distanceTo(targetPos);
                        if (distance < fallbackMinDistance) {
                            fallbackMinDistance = distance;
                            fallbackPos = move;
                        }
                    }
                }
                if (!fallbackPos.equals(current)) {
                    board.updatePosition(enemy, fallbackPos);
                } else {
                    // No valid empty spot found, enemy might be stuck.
                }

            } else {
                board.updatePosition(enemy, bestNextPos);
            }
        }
    }


    private void cleanupDeadUnits() {
        // Clear dead enemies and award gold
        Iterator<Enemy> enemyIterator = enemies.iterator();
        while (enemyIterator.hasNext()) {
            Enemy enemy = enemyIterator.next();
            if (!enemy.isAlive()) {
                board.removeUnit(enemy);
                gold += enemy.getGoldValue();
                System.out.printf("   %s (%s) –±—ã–ª —É—Å—Ç—Ä–∞–Ω–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ %d –∑–æ–ª–æ—Ç–∞. –í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞: %d%n",
                        enemy.getName(), enemy.getClass().getSimpleName(), enemy.getGoldValue(), gold);
                enemyIterator.remove();
                // Remove from enemiesActedThisRound if it was there and now dead
                enemiesActedThisRound.remove(enemy);
            }
        }

        // Clear dead heroes from board
        List<Hero> deadHeroes = heroes.stream().filter(h -> !h.isAlive()).toList();
        for (Hero hero : deadHeroes) {
            board.removeUnit(hero);
            System.out.println("–ì–µ—Ä–æ–π " + hero.getName() + " –Ω–∞ " + hero.getPosition().toString() + " –ø–∞–ª.");
        }
    }

    private void showShop() {
        System.out.println("\n===== –ú–ê–ì–ê–ó–ò–ù =====");
        System.out.println("–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: " + gold);
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã (—Å—Ç–æ–∏–º–æ—Å—Ç—å):");
        System.out.println("1. –£–≤–µ–ª–∏—á–∏—Ç—å HP –≥–µ—Ä–æ—è –Ω–∞ 20 (20 –∑–æ–ª–æ—Ç–∞)");
        System.out.println("2. –£–≤–µ–ª–∏—á–∏—Ç—å –£—Ä–æ–Ω –≥–µ—Ä–æ—è –Ω–∞ 5 (15 –∑–æ–ª–æ—Ç–∞)");
        System.out.println("3. –£–≤–µ–ª–∏—á–∏—Ç—å –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ—Ä–æ—è –Ω–∞ 1 (25 –∑–æ–ª–æ—Ç–∞)");
        System.out.println("4. –£–≤–µ–ª–∏—á–∏—Ç—å –î–∞–ª—å–Ω–æ—Å—Ç—å –≥–µ—Ä–æ—è –Ω–∞ 1 (20 –∑–æ–ª–æ—Ç–∞)");
        System.out.println("5. –í—ã—Ö–æ–¥ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞");

        while (true) {
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø–≥—Ä–µ–π–¥ –∏–ª–∏ '5' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ");
            int choice = -1;
            try {
                choice = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.nextLine();
                continue;
            }
            scanner.nextLine();

            if (choice == 5) {
                System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.");
                break;
            }

            Hero targetHero = null;
            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞:");
            List<Hero> aliveHeroes = heroes.stream().filter(Hero::isAlive).collect(Collectors.toList());
            if (aliveHeroes.isEmpty()) {
                System.out.println("–ù–µ—Ç –∂–∏–≤—ã—Ö –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞.");
                continue;
            }

            for (int i = 0; i < aliveHeroes.size(); i++) {
                Hero h = aliveHeroes.get(i);
                System.out.printf("%d: %s (–£—Ä.%d) HP: %d/%d, –£—Ä–æ–Ω: %d, –î–∞–ª—å–Ω–æ—Å—Ç—å: %d, –°–∫–æ—Ä–æ—Å—Ç—å: %d%n",
                        i, h.getName(), h.getLevel(), h.getHealth(), h.getMaxHealth(), h.getDamage(), h.getRange(), h.getSpeed());
            }
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ—Ä–æ—è: ");
            int heroIndex = -1;
            try {
                heroIndex = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.nextLine();
                continue;
            }
            scanner.nextLine();

            if (heroIndex >= 0 && heroIndex < aliveHeroes.size()) {
                targetHero = aliveHeroes.get(heroIndex);
            } else {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–µ—Ä–æ—è.");
                continue;
            }

            int cost = 0;
            String upgradeType = "";
            switch (choice) {
                case 1:
                    cost = 20;
                    upgradeType = "HP";
                    break;
                case 2:
                    cost = 15;
                    upgradeType = "–£—Ä–æ–Ω";
                    break;
                case 3:
                    cost = 25;
                    upgradeType = "–°–∫–æ—Ä–æ—Å—Ç—å";
                    break;
                case 4:
                    cost = 20;
                    upgradeType = "–î–∞–ª—å–Ω–æ—Å—Ç—å";
                    break;
                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–ø–≥—Ä–µ–π–¥–∞.");
                    continue;
            }

            if (gold >= cost) {
                gold -= cost;
                switch (choice) {
                    case 1:
                        targetHero.upgradeHealthStat(20);
                        break;
                    case 2:
                        targetHero.upgradeDamageStat(5);
                        break;
                    case 3:
                        targetHero.upgradeSpeedStat(1);
                        break;
                    case 4:
                        targetHero.upgradeRangeStat(1);
                        break;
                }
                System.out.printf("–£—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω %s %s –Ω–∞ %s. –ó–æ–ª–æ—Ç–æ: %d%n",
                        targetHero.getName(), upgradeType, targetHero.getPosition().toString(), gold);
                displayUnitStats();
            } else {
                System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞! –í–∞–º –Ω—É–∂–Ω–æ " + cost + ", —É –≤–∞—Å " + gold + ".");
            }
        }
    }


    private boolean isGameOver() {
        boolean allHeroesDead = heroes.stream().noneMatch(Hero::isAlive);
        boolean allWavesCleared = wave > MAX_WAVES;
        return allHeroesDead || allWavesCleared;
    }

    private void concludeGame() {
        System.out.println("\n===== –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê =====");
        if (heroes.stream().noneMatch(Hero::isAlive)) {
            System.out.println("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—Å–µ –≥–µ—Ä–æ–∏ –ø–∞–ª–∏.");
        } else if (wave > MAX_WAVES) {
            System.out.println("üèÜ –ü–æ–±–µ–¥–∞! –í—Å–µ " + MAX_WAVES + " –≤–æ–ª–Ω –æ—Ç–±–∏—Ç—ã!");
        } else {
            System.out.println("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: " + turnCount);
        }
        System.out.println("\n--- –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç ---");
        System.out.println("–í–æ–ª–Ω –ø—Ä–æ–π–¥–µ–Ω–æ: " + (wave - 1));
        System.out.println("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∑–æ–ª–æ—Ç–æ: " + gold);
        System.out.println("–ì–µ—Ä–æ–∏:");
        heroes.forEach(hero ->
                System.out.printf("  %s: %s (–£—Ä.%d) HP: %d/%d, –£—Ä–æ–Ω: %d, –î–∞–ª—å–Ω–æ—Å—Ç—å: %d, –°–∫–æ—Ä–æ—Å—Ç—å: %d%n",
                        hero.getName(), hero.isAlive() ? "–ñ–∏–≤" : "–ü–∞–ª",
                        hero.getLevel(), hero.getHealth(), hero.getMaxHealth(),
                        hero.getDamage(), hero.getRange(), hero.getSpeed())
        );
    }
}